// <auto-generated />
using System;
using LotteryChecker.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LotteryChecker.Core.Migrations
{
    [DbContext(typeof(LotteryContext))]
<<<<<<<< HEAD:LotteryChecker.Core/Migrations/20240518091529_Add-Prize-For-SearchHistory.Designer.cs
    [Migration("20240518091529_Add-Prize-For-SearchHistory")]
    partial class AddPrizeForSearchHistory
========
    [Migration("20240513155151_InitDB")]
    partial class InitDB
>>>>>>>> develop/merge-branch:LotteryChecker.Core/Migrations/20240513155151_InitDB.Designer.cs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LotteryChecker.Core.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("24dd0b58-c0e0-470c-8ed2-14467a3b868f"),
                            AccessFailedCount = 0,
<<<<<<<< HEAD:LotteryChecker.Core/Migrations/20240518091529_Add-Prize-For-SearchHistory.Designer.cs
                            ConcurrencyStamp = "e8da3917-0f61-4556-96ca-2847daee1d04",
========
                            ConcurrencyStamp = "2fd6795b-d448-46bc-9f33-28f160c29fdd",
>>>>>>>> develop/merge-branch:LotteryChecker.Core/Migrations/20240513155151_InitDB.Designer.cs
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hoang Chi",
                            IsActive = false,
                            LastName = "Hieu",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
<<<<<<<< HEAD:LotteryChecker.Core/Migrations/20240518091529_Add-Prize-For-SearchHistory.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAEKLQpNK1A4uwCmLsV6teOfZCIVkcxec+rwM+Isl6lV5QCHWFh3qZ0JnuYKhWolTjaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8b6d373-6eae-4b02-b8e7-36c6644c6277",
========
                            PasswordHash = "AQAAAAIAAYagAAAAENyyHO4FLRsQVBFDbQhTQjKSU5gYkyyh96eIGoKUgOCPcJWt8ZZsIMfZ7ZfwlmyQPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a07b491-4e09-447c-a8ea-273b45e80ab4",
>>>>>>>> develop/merge-branch:LotteryChecker.Core/Migrations/20240513155151_InitDB.Designer.cs
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("57fa9a8e-3105-49a0-b0f2-6d88fdfcff8d"),
                            AccessFailedCount = 0,
<<<<<<<< HEAD:LotteryChecker.Core/Migrations/20240518091529_Add-Prize-For-SearchHistory.Designer.cs
                            ConcurrencyStamp = "efe6e01f-f21b-4e71-80b2-2f3979d2fd0e",
========
                            ConcurrencyStamp = "7250f19f-c677-49c9-9cdf-bab5e9999e9e",
>>>>>>>> develop/merge-branch:LotteryChecker.Core/Migrations/20240513155151_InitDB.Designer.cs
                            Email = "hieuhv@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ho Van",
                            IsActive = false,
                            LastName = "Hieu",
                            LockoutEnabled = false,
                            NormalizedEmail = "HIEUHV@GMAIL.COM",
                            NormalizedUserName = "HIEUHV@GMAIL.COM",
<<<<<<<< HEAD:LotteryChecker.Core/Migrations/20240518091529_Add-Prize-For-SearchHistory.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAEC2n40vUm0+jN4MIwKe+RPAOWe7dGzFMXMdZBwHKJMWSmRnpQV6cbYmUzeRea8H9HQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "761f7c02-6e25-4e0e-931f-b30b209b430b",
========
                            PasswordHash = "AQAAAAIAAYagAAAAEIWIi9q9piEON1J+ePOfMFBcKVU7MWzXxbcKxnC74K9gMAxJnt43blKIuJtojX04Ww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f19eacd-bcb7-444f-93c6-739ee4289948",
>>>>>>>> develop/merge-branch:LotteryChecker.Core/Migrations/20240513155151_InitDB.Designer.cs
                            TwoFactorEnabled = false,
                            UserName = "hieuhv@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("36b35306-154c-4518-8fc1-d7e756522111"),
                            AccessFailedCount = 0,
<<<<<<<< HEAD:LotteryChecker.Core/Migrations/20240518091529_Add-Prize-For-SearchHistory.Designer.cs
                            ConcurrencyStamp = "a494a41e-4f2f-48b6-a7a4-afd48f954ba6",
========
                            ConcurrencyStamp = "db448e53-d8a5-40f9-8730-cb55fcb7ee45",
>>>>>>>> develop/merge-branch:LotteryChecker.Core/Migrations/20240513155151_InitDB.Designer.cs
                            Email = "vietlq@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Le Quang",
                            IsActive = false,
                            LastName = "Viet",
                            LockoutEnabled = false,
                            NormalizedEmail = "VIETLQ@GMAIL.COM",
                            NormalizedUserName = "VIETLQ@GMAIL.COM",
<<<<<<<< HEAD:LotteryChecker.Core/Migrations/20240518091529_Add-Prize-For-SearchHistory.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAELWxxgiBkGNprB+wah6b9JN/XXQ5ULpsfW2N1/jclkv5qZwr3LdhZb4sRMdk+C6xBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2136260d-c218-4539-a455-fdc8657a85ff",
========
                            PasswordHash = "AQAAAAIAAYagAAAAEFoA1fYXsRZyvCq476MOOEVHPgBT5Vlfpo3mpEJdlQPKsa6BqUAuSPomIluRdkRzuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "183a06d6-78c1-4354-8152-671a8e8d2ca5",
>>>>>>>> develop/merge-branch:LotteryChecker.Core/Migrations/20240513155151_InitDB.Designer.cs
                            TwoFactorEnabled = false,
                            UserName = "vietlq@gmail.com"
                        });
                });

            modelBuilder.Entity("LotteryChecker.Core.Entities.Lottery", b =>
                {
                    b.Property<int>("LotteryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LotteryId"));

                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DrawDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("LotteryNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.HasKey("LotteryId");

                    b.HasIndex("RewardId");

                    b.ToTable("Lotteries");

                    b.HasData(
                        new
                        {
                            LotteryId = 1,
                            DrawDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublished = false,
                            LotteryNumber = "123456",
                            PublishDate = new DateTime(2024, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RewardId = 1
                        },
                        new
                        {
                            LotteryId = 2,
                            DrawDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublished = false,
                            LotteryNumber = "234567",
                            PublishDate = new DateTime(2024, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RewardId = 2
                        },
                        new
                        {
                            LotteryId = 3,
                            DrawDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublished = false,
                            LotteryNumber = "345678",
                            PublishDate = new DateTime(2024, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RewardId = 3
                        },
                        new
                        {
                            LotteryId = 4,
                            DrawDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublished = false,
                            LotteryNumber = "456789",
                            PublishDate = new DateTime(2024, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RewardId = 4
                        },
                        new
                        {
                            LotteryId = 5,
                            DrawDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublished = false,
                            LotteryNumber = "567890",
                            PublishDate = new DateTime(2024, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RewardId = 5
                        },
                        new
                        {
                            LotteryId = 6,
                            DrawDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublished = false,
                            LotteryNumber = "678901",
                            PublishDate = new DateTime(2024, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RewardId = 6
                        });
                });

            modelBuilder.Entity("LotteryChecker.Core.Entities.PurchaseTicket", b =>
                {
                    b.Property<int>("PurchaseTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseTicketId"));

                    b.Property<DateTime>("DrawDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LotteryNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PurchaseTicketId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseTickets");

                    b.HasData(
                        new
                        {
                            PurchaseTicketId = 1,
<<<<<<<< HEAD:LotteryChecker.Core/Migrations/20240518091529_Add-Prize-For-SearchHistory.Designer.cs
                            DrawDate = new DateTime(2024, 5, 18, 16, 15, 26, 635, DateTimeKind.Local).AddTicks(1851),
========
                            DrawDate = new DateTime(2024, 5, 13, 22, 51, 50, 929, DateTimeKind.Local).AddTicks(5838),
>>>>>>>> develop/merge-branch:LotteryChecker.Core/Migrations/20240513155151_InitDB.Designer.cs
                            LotteryNumber = "123456",
                            PurchaseDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("36b35306-154c-4518-8fc1-d7e756522111")
                        },
                        new
                        {
                            PurchaseTicketId = 2,
<<<<<<<< HEAD:LotteryChecker.Core/Migrations/20240518091529_Add-Prize-For-SearchHistory.Designer.cs
                            DrawDate = new DateTime(2024, 5, 18, 16, 15, 26, 635, DateTimeKind.Local).AddTicks(1904),
========
                            DrawDate = new DateTime(2024, 5, 13, 22, 51, 50, 929, DateTimeKind.Local).AddTicks(5858),
>>>>>>>> develop/merge-branch:LotteryChecker.Core/Migrations/20240513155151_InitDB.Designer.cs
                            LotteryNumber = "234567",
                            PurchaseDate = new DateTime(2024, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("57fa9a8e-3105-49a0-b0f2-6d88fdfcff8d")
                        },
                        new
                        {
                            PurchaseTicketId = 3,
<<<<<<<< HEAD:LotteryChecker.Core/Migrations/20240518091529_Add-Prize-For-SearchHistory.Designer.cs
                            DrawDate = new DateTime(2024, 5, 18, 16, 15, 26, 635, DateTimeKind.Local).AddTicks(1906),
========
                            DrawDate = new DateTime(2024, 5, 13, 22, 51, 50, 929, DateTimeKind.Local).AddTicks(5860),
>>>>>>>> develop/merge-branch:LotteryChecker.Core/Migrations/20240513155151_InitDB.Designer.cs
                            LotteryNumber = "345678",
                            PurchaseDate = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("57fa9a8e-3105-49a0-b0f2-6d88fdfcff8d")
                        },
                        new
                        {
                            PurchaseTicketId = 4,
                            DrawDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LotteryNumber = "456789",
                            PurchaseDate = new DateTime(2024, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("36b35306-154c-4518-8fc1-d7e756522111")
                        });
                });

            modelBuilder.Entity("LotteryChecker.Core.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("LotteryChecker.Core.Entities.Reward", b =>
                {
                    b.Property<int>("RewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardId"));

                    b.Property<string>("RewardName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RewardValue")
                        .HasColumnType("int");

                    b.HasKey("RewardId");

                    b.ToTable("Rewards");

                    b.HasData(
                        new
                        {
                            RewardId = 1,
                            RewardName = "Prize 8",
                            RewardValue = 1000000
                        },
                        new
                        {
                            RewardId = 2,
                            RewardName = "Prize 7",
                            RewardValue = 2000000
                        },
                        new
                        {
                            RewardId = 3,
                            RewardName = "Prize 6",
                            RewardValue = 3000000
                        },
                        new
                        {
                            RewardId = 4,
                            RewardName = "Prize 5",
                            RewardValue = 4000000
                        },
                        new
                        {
                            RewardId = 5,
                            RewardName = "Prize 4",
                            RewardValue = 5000000
                        },
                        new
                        {
                            RewardId = 6,
                            RewardName = "Prize 3",
                            RewardValue = 6000000
                        },
                        new
                        {
                            RewardId = 7,
                            RewardName = "Prize 2",
                            RewardValue = 7000000
                        },
                        new
                        {
                            RewardId = 8,
                            RewardName = "Prize 1",
                            RewardValue = 8000000
                        });
                });

            modelBuilder.Entity("LotteryChecker.Core.Entities.SearchHistory", b =>
                {
                    b.Property<int>("SearchHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SearchHistoryId"));

                    b.Property<DateTime>("DrawDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LotteryNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Prize")
                        .HasColumnType("int");

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SearchHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("SearchHistories");

                    b.HasData(
                        new
                        {
                            SearchHistoryId = 1,
                            DrawDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LotteryNumber = "123456",
                            Prize = 0,
                            SearchDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("36b35306-154c-4518-8fc1-d7e756522111")
                        },
                        new
                        {
                            SearchHistoryId = 2,
                            DrawDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LotteryNumber = "234567",
                            Prize = 0,
                            SearchDate = new DateTime(2024, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("57fa9a8e-3105-49a0-b0f2-6d88fdfcff8d")
                        },
                        new
                        {
                            SearchHistoryId = 3,
                            DrawDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LotteryNumber = "345678",
                            Prize = 0,
                            SearchDate = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("57fa9a8e-3105-49a0-b0f2-6d88fdfcff8d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8fd818f-63f1-49ee-bec5-f7b66cafbfca"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("fe0e9c2d-6abd-4f73-a635-63fc58ec700e"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("24dd0b58-c0e0-470c-8ed2-14467a3b868f"),
                            RoleId = new Guid("b8fd818f-63f1-49ee-bec5-f7b66cafbfca")
                        },
                        new
                        {
                            UserId = new Guid("36b35306-154c-4518-8fc1-d7e756522111"),
                            RoleId = new Guid("fe0e9c2d-6abd-4f73-a635-63fc58ec700e")
                        },
                        new
                        {
                            UserId = new Guid("57fa9a8e-3105-49a0-b0f2-6d88fdfcff8d"),
                            RoleId = new Guid("fe0e9c2d-6abd-4f73-a635-63fc58ec700e")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LotteryChecker.Core.Entities.Lottery", b =>
                {
                    b.HasOne("LotteryChecker.Core.Entities.Reward", "Reward")
                        .WithMany("Lotteries")
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("LotteryChecker.Core.Entities.PurchaseTicket", b =>
                {
                    b.HasOne("LotteryChecker.Core.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LotteryChecker.Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("LotteryChecker.Core.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LotteryChecker.Core.Entities.SearchHistory", b =>
                {
                    b.HasOne("LotteryChecker.Core.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LotteryChecker.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LotteryChecker.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LotteryChecker.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LotteryChecker.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LotteryChecker.Core.Entities.Reward", b =>
                {
                    b.Navigation("Lotteries");
                });
#pragma warning restore 612, 618
        }
    }
}
